usethis::use_git()
usethis::use_git()
usethis::use_git()
usethis::use_git()
usethis::use_git()
usethis::use_github()
library(tidyverse)
library(tidymodels)
library(corrplot)
library(themis)
library(vip)
dados <- read.csv("C:\\Users\\mcaio\\Desktop\\Cogumelos_classificação\\BankChurners.csv")
dados <- dados %>%
select(-c(Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1,
Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2)) %>%
mutate(Attrition_Flag = as.factor(Attrition_Flag))
set.seed(42)
divisao <- initial_split(dados, prop = 0.8, strata = Attrition_Flag)
base_train <- training(divisao)
base_test <- testing(divisao)
dados_recipe <- recipe(Attrition_Flag ~., base_train) %>%
step_dummy(all_nominal(), -all_outcomes())
arvore_decisao <- decision_tree(
cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()
) %>%
set_engine("rpart") %>%
set_mode("classification")
rforest <- rand_forest(
mtry = tune(),
trees = 30,
min_n = tune()) %>%
set_mode("classification") %>%
set_engine("ranger")
rf_wf <- workflow() %>%
add_recipe(dados_recipe) %>%
add_model(rforest)
rf_grid <- grid_regular(
mtry(range = c(10, 30)),
min_n(range = c(2, 8)),
levels = 3
)
dados_cv <- vfold_cv(base_train, v = 5)
rf_tune <- tune_grid(rf_wf,
resamples = dados_cv,
grid = rf_grid,
metrics = metric_set(recall, accuracy, spec, sens, roc_auc))
rf_tune %>% collect_metrics()
rf_tune %>% show_best("recall")
best_param <- select_best(rf_tune, metric = 'recall')
rf_last_fit <- finalize_model(rforest, best_param)
final_wf <- workflow() %>%
add_recipe(dados_recipe) %>%
add_model(rf_last_fit)
final_res <- final_wf %>% last_fit(divisao, metrics = metric_set(recall, precision, roc_auc, sens, spec))
final_res %>% collect_metrics()
