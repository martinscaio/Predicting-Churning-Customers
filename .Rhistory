dados <- dados %>% mutate(income = forcats::as_factor(income),
income = forcats::fct_rev(income))
set.seed(505)
divisao <- initial_split(dados, prop = 0.8, strata = income)
base_train <- training(divisao)
base_teste <- testing(divisao)
receita <- dados %>% recipe(income ~., base_train) %>%
step_rm(`native-country`) %>%
step_impute_mode(all_nominal())
rforest <- rand_forest(
mtry = tune(),
trees = 80,
min_n = tune()) %>%
set_mode("classification") %>%
set_engine("ranger")
rf_wf <- workflow() %>%
add_recipe(receita) %>%
add_model(rforest)
dados_cv <- vfold_cv(base_train, v = 3)
rf_grid <- expand.grid(mtry = 3:6, min_n = c(20,30,50,60))
rf_res <-
rf_wf %>%
tune_grid(
resamples = dados_cv,
grid = rf_grid,
metrics = metric_set(accuracy, precision, recall, f_meas, spec, sens)
)
rf_res %>% unnest(.metrics)
rf_res %>% show_best("recall")
rf_res %>% show_best('recall')
new_rf <- rand_forest(mtry = 4, trees = 40, min_n = 20) %>%
set_mode('classification') %>%
set_engine('ranger')
new_wflow <- workflow() %>%
add_model(new_rf) %>%
add_recipe(receita)
fit_rf <- fit_resamples(new_wflow,
dados_cv,
metrics = metric_set(accuracy, recall, precision, f_meas, spec, sens),
control = control_resamples(save_pred = TRUE))
fit_rf %>% collect_metrics()
best_parametro <- select_best(fit_rf, metric = 'recall')
rf_last_fit <- finalize_model(new_rf, best_parametro)
final_wf <- workflow() %>%
add_recipe(receita) %>%
add_model(rf_last_fit)
modelo_final <- final_wf %>% last_fit(divisao, metrics = metric_set(recall, precision, accuracy, f_meas))
matriz_conf <- modelo_final %>% unnest(.predictions) %>% conf_mat(estimate = .pred_class, truth = income)
autoplot(matriz_conf, type = 'heatmap')
summary(matriz_conf)
dados %>% count(`capital-loss`)
dados %>% count(`capital-gain`)
dados %>% count(fnlwgt)
dados %>% count(fnlwgt) %>% arrange(desc(n))
dados <- read_csv("C:\\Users\\mcaio\\Desktop\\Random Forest\\income_evaluation.csv")
dados <- dados %>% na_if("?")
dados <- dados %>% mutate(income = forcats::as_factor(income),
income = forcats::fct_rev(income))
set.seed(505)
divisao <- initial_split(dados, prop = 0.8, strata = income)
base_train <- training(divisao)
base_teste <- testing(divisao)
receita <- dados %>% recipe(income ~., base_train) %>%
step_rm(`native-country`, `capital-gain`, `capital-loss`, fnlwgt) %>%
step_impute_mode(all_nominal())
rforest <- rand_forest(
mtry = tune(),
trees = 80,
min_n = tune()) %>%
set_mode("classification") %>%
set_engine("ranger")
rf_wf <- workflow() %>%
add_recipe(receita) %>%
add_model(rforest)
dados_cv <- vfold_cv(base_train, v = 3)
rf_grid <- expand.grid(mtry = 3:6, min_n = c(20,30,50,60))
rf_res <-
rf_wf %>%
tune_grid(
resamples = dados_cv,
grid = rf_grid,
metrics = metric_set(accuracy, precision, recall, f_meas, spec, sens)
)
rf_res %>% unnest(.metrics)
rf_res %>% show_best("recall")
dados <- read_csv("C:\\Users\\mcaio\\Desktop\\Random Forest\\income_evaluation.csv")
dados <- dados %>% na_if("?")
dados <- dados %>% mutate(income = forcats::as_factor(income),
income = forcats::fct_rev(income))
set.seed(505)
divisao <- initial_split(dados, prop = 0.8, strata = income)
base_train <- training(divisao)
base_teste <- testing(divisao)
receita <- dados %>% recipe(income ~., base_train) %>%
step_rm(`native-country`, `capital-gain`, `capital-loss`) %>%
step_impute_mode(all_nominal())
rforest <- rand_forest(
mtry = tune(),
trees = 80,
min_n = tune()) %>%
set_mode("classification") %>%
set_engine("ranger")
rf_wf <- workflow() %>%
add_recipe(receita) %>%
add_model(rforest)
dados_cv <- vfold_cv(base_train, v = 3)
rf_grid <- expand.grid(mtry = 3:6, min_n = c(20,30,50,60))
rf_res <-
rf_wf %>%
tune_grid(
resamples = dados_cv,
grid = rf_grid,
metrics = metric_set(accuracy, precision, recall, f_meas, spec, sens)
)
rf_res %>% unnest(.metrics)
rf_res %>% show_best("recall")
dados %>% count(`capital-gain`) %>% arrange(desc(n))
receita <- dados %>% recipe(income ~., base_train) %>%
step_rm(`native-country`, `capital-gain`) %>%
step_impute_mode(all_nominal())
rforest <- rand_forest(
mtry = tune(),
trees = 80,
min_n = tune()) %>%
set_mode("classification") %>%
set_engine("ranger")
rf_wf <- workflow() %>%
add_recipe(receita) %>%
add_model(rforest)
dados_cv <- vfold_cv(base_train, v = 3)
rf_grid <- expand.grid(mtry = 3:6, min_n = c(20,30,50,60))
rf_res <-
rf_wf %>%
tune_grid(
resamples = dados_cv,
grid = rf_grid,
metrics = metric_set(accuracy, precision, recall, f_meas, spec, sens)
)
rf_res %>% unnest(.metrics)
rf_res %>% show_best("recall")
receita <- dados %>% recipe(income ~., base_train) %>%
#step_rm(`native-country`) %>%
step_impute_mode(all_nominal())
rforest <- rand_forest(
mtry = tune(),
trees = 80,
min_n = tune()) %>%
set_mode("classification") %>%
set_engine("ranger")
rf_wf <- workflow() %>%
add_recipe(receita) %>%
add_model(rforest)
dados_cv <- vfold_cv(base_train, v = 3)
rf_grid <- expand.grid(mtry = 3:6, min_n = c(20,30,50,60))
rf_res <-
rf_wf %>%
tune_grid(
resamples = dados_cv,
grid = rf_grid,
metrics = metric_set(accuracy, precision, recall, f_meas, spec, sens)
)
dados <- read_csv("C:\\Users\\mcaio\\Desktop\\Random Forest\\income_evaluation.csv")
dados <- dados %>% na_if("?")
dados <- dados %>% mutate(income = forcats::as_factor(income),
income = forcats::fct_rev(income))
set.seed(505)
divisao <- initial_split(dados, prop = 0.8, strata = income)
base_train <- training(divisao)
base_teste <- testing(divisao)
receita <- dados %>% recipe(income ~., base_train) %>%
step_rm(`native-country`) %>%
step_impute_mode(all_nominal())
rforest <- rand_forest(
mtry = tune(),
trees = 80,
min_n = tune()) %>%
set_mode("classification") %>%
set_engine("ranger")
rf_wf <- workflow() %>%
add_recipe(receita) %>%
add_model(rforest)
dados_cv <- vfold_cv(base_train, v = 3)
rf_grid <- expand.grid(mtry = 3:6, min_n = c(20,30,50,60))
rf_res <-
rf_wf %>%
tune_grid(
resamples = dados_cv,
grid = rf_grid,
metrics = metric_set(accuracy, precision, recall, f_meas, spec, sens)
)
rf_res %>% unnest(.metrics)
rf_res %>% show_best("recall")
rf_res %>% show_best('recall')
new_rf <- rand_forest(mtry = 4, trees = 40, min_n = 20) %>%
set_mode('classification') %>%
set_engine('ranger')
new_wflow <- workflow() %>%
add_model(new_rf) %>%
add_recipe(receita)
fit_rf <- fit_resamples(new_wflow,
dados_cv,
metrics = metric_set(accuracy, recall, precision, f_meas, spec, sens),
control = control_resamples(save_pred = TRUE))
fit_rf %>% collect_metrics()
best_parametro <- select_best(fit_rf, metric = 'recall')
rf_last_fit <- finalize_model(new_rf, best_parametro)
final_wf <- workflow() %>%
add_recipe(receita) %>%
add_model(rf_last_fit)
modelo_final <- final_wf %>% last_fit(divisao, metrics = metric_set(recall, precision, accuracy, f_meas))
modelo_final %>% collect_metrics()
matriz_conf <- modelo_final %>% unnest(.predictions) %>% conf_mat(estimate = .pred_class, truth = income)
autoplot(matriz_conf, type = 'heatmap')
summary(matriz_conf)
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(themis)
dados <- read_csv("C:\\Users\\mcaio\\Desktop\\Random Forest\\income_evaluation.csv")
dados <- dados %>% na_if("?") %>% mutate(income = forcats::as_factor(income),
income = forcats::fct_rev(income))
set.seed(505)
divisao <- initial_split(dados, prop = 0.8, strata = income)
base_train <- training(divisao)
base_teste <- testing(divisao)
receita <- dados %>% recipe(income ~., base_train) %>%
step_rm(`native-country`, `marital-status`) %>%
step_impute_mode(workclass, occupation) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric()) %>%
step_dummy(all_nominal(), -all_outcomes()) #%>%
arvore <- decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine("rpart") %>%
set_mode("classification")
rforest <- rand_forest(
mtry = tune(),
trees = 80,
min_n = tune()) %>%
set_mode("classification") %>%
set_engine("ranger")
rf_wf <- workflow() %>%
add_recipe(receita) %>%
add_model(rforest)
arvore_wf <- workflow() %>%
add_recipe(receita) %>%
add_model(arvore)
rlog <- logistic_reg(penalty = tune(), mixture = 1) %>%
set_mode("classification") %>%
set_engine("glmnet")
log_r <- workflow() %>%
add_recipe(receita) %>%
add_model(rlog)
dados_cv <- vfold_cv(base_train, v = 3)
rf_grid <- expand.grid(mtry = 10:13, min_n = c(80, 90, 100,120))
rf_res <-
rf_wf %>%
tune_grid(
resamples = dados_cv,
grid = rf_grid,
metrics = metric_set(accuracy, precision, recall, f_meas, spec, sens)
)
rf_res %>% unnest(.metrics)
rf_res %>% show_best("recall")
lr_tune_grid <- tune_grid(
log_r,
resamples = dados_cv,
metrics = metric_set(
accuracy,
roc_auc,
precision,
recall
)
)
lr_tune_grid %>% collect_metrics()
lr_tune_grid %>% show_best("recall")
lr_tune_grid %>% show_best("precision")
arvore_grid <- grid_regular(cost_complexity(),
tree_depth(),
min_n(),
levels = 3)
arvore_tune <- tune_grid(arvore_wf,
resamples = dados_cv,
grid = arvore_grid,
metrics = metric_set(precision, recall, f_meas, accuracy, sens, spec, roc_auc))
arvore_tune %>% show_best('f_meas')
arvore_tune %>% collect_metrics()
arvore_tune %>% show_best('recall')
arvore_tune %>% show_best('precision')
arvore_tune %>% show_best('recall')
rf_res %>% show_best("recall")
rf_res %>% show_best("precision")
receita <- dados %>% recipe(income ~., base_train) %>%
step_rm(`native-country`, `marital-status`) %>%
step_impute_mode(workclass, occupation) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric()) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_adasyn(income)
rforest <- rand_forest(
mtry = tune(),
trees = 80,
min_n = tune()) %>%
set_mode("classification") %>%
set_engine("ranger")
rlog <- logistic_reg(penalty = tune(), mixture = 1) %>%
set_mode("classification") %>%
set_engine("glmnet")
arvore <- decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine("rpart") %>%
set_mode("classification")
rf_wf <- workflow() %>%
add_recipe(receita) %>%
add_model(rforest)
log_r <- workflow() %>%
add_recipe(receita) %>%
add_model(rlog)
arvore_wf <- workflow() %>%
add_recipe(receita) %>%
add_model(arvore)
dados_cv <- vfold_cv(base_train, v = 3)
rf_grid <- expand.grid(mtry = 10:13, min_n = c(80, 90, 100,120))
rf_res <-
rf_wf %>%
tune_grid(
resamples = dados_cv,
grid = rf_grid,
metrics = metric_set(accuracy, precision, recall, f_meas, spec, sens)
)
rf_res %>% unnest(.metrics)
rf_res %>% show_best("precision")
rf_res %>% show_best("recall")
rf_res %>% show_best("f_meas")
lr_tune_grid <- tune_grid(
log_r,
resamples = dados_cv,
metrics = metric_set(
accuracy,
roc_auc,
precision,
recall
)
)
lr_tune_grid %>% collect_metrics()
lr_tune_grid %>% show_best("precision")
lr_tune_grid %>% show_best("recall")
arvore_grid <- grid_regular(cost_complexity(),
tree_depth(),
min_n(),
levels = 3)
arvore_tune <- tune_grid(arvore_wf,
resamples = dados_cv,
grid = arvore_grid,
metrics = metric_set(precision, recall, f_meas, accuracy, sens, spec, roc_auc))
arvore_tune %>% collect_metrics()
arvore_tune %>% show_best('recall')
arvore_tune %>% show_best('precision')
receita <- dados %>% recipe(income ~., base_train) %>%
step_rm(`native-country`, `marital-status`) %>%
step_impute_mode(workclass, occupation) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric()) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_smote(income)
rf_wf <- workflow() %>%
add_recipe(receita) %>%
add_model(rforest)
log_r <- workflow() %>%
add_recipe(receita) %>%
add_model(rlog)
arvore_wf <- workflow() %>%
add_recipe(receita) %>%
add_model(arvore)
dados_cv <- vfold_cv(base_train, v = 3)
rf_grid <- expand.grid(mtry = 10:13, min_n = c(80, 90, 100,120))
rf_res <-
rf_wf %>%
tune_grid(
resamples = dados_cv,
grid = rf_grid,
metrics = metric_set(accuracy, precision, recall, f_meas, spec, sens)
)
rf_res %>% unnest(.metrics)
rf_res %>% show_best("f_meas")
rf_res %>% show_best("precision")
rf_res %>% show_best("recall")
lr_tune_grid <- tune_grid(
log_r,
resamples = dados_cv,
metrics = metric_set(
accuracy,
roc_auc,
precision,
recall
)
)
lr_tune_grid %>% collect_metrics()
lr_tune_grid %>% show_best("recall")
lr_tune_grid %>% show_best("precision")
arvore_grid <- grid_regular(cost_complexity(),
tree_depth(),
min_n(),
levels = 3)
arvore_tune <- tune_grid(arvore_wf,
resamples = dados_cv,
grid = arvore_grid,
metrics = metric_set(precision, recall, f_meas, accuracy, sens, spec, roc_auc))
arvore_tune %>% collect_metrics()
arvore_tune %>% show_best('precision')
arvore_tune %>% show_best('recall')
library(tidyverse)
library(tidymodels)
library(corrplot)
library(themis)
library(vip)
dados <- read.csv("C:\\Users\\mcaio\\Desktop\\Cogumelos_classificação\\BankChurners.csv")
dados <- dados %>%
select(-c(Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1,
Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2)) %>%
mutate(Attrition_Flag = as.factor(Attrition_Flag))
set.seed(42)
divisao <- initial_split(dados, prop = 0.8, strata = Attrition_Flag)
base_train <- training(divisao)
base_test <- testing(divisao)
dados_recipe <- recipe(Attrition_Flag ~., base_train) %>%
step_dummy(all_nominal(), -all_outcomes())
arvore_decisao <- decision_tree(
cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()
) %>%
set_engine("rpart") %>%
set_mode("classification")
rforest <- rand_forest(
mtry = tune(),
trees = 30,
min_n = tune()) %>%
set_mode("classification") %>%
set_engine("ranger")
arvore_wf <- workflow() %>%
add_recipe(dados_recipe) %>%
add_model(arvore_decisao)
rf_wf <- workflow() %>%
add_recipe(dados_recipe) %>%
add_model(rforest)
arvore_grid <- grid_regular(cost_complexity(),
tree_depth(),
min_n(),
levels = 3)
rf_grid <- grid_regular(
mtry(range = c(10, 30)),
min_n(range = c(2, 8)),
levels = 3
)
dados_cv <- vfold_cv(base_train, v = 5)
arvore_tune <- tune_grid(arvore_wf,
resamples = dados_cv,
grid = arvore_grid,
metrics = metric_set(recall, accuracy, spec, sens, roc_auc),
control = control_resamples(save_pred = TRUE))
collect_metrics(arvore_tune) %>% head(20)
autoplot(arvore_tune) + theme_bw()
show_best(arvore_tune, metric = "recall")
rf_tune <- tune_grid(rf_wf,
resamples = dados_cv,
grid = rf_grid,
metrics = metric_set(recall, accuracy, spec, sens, roc_auc))
rf_tune %>% collect_metrics()
rf_tune %>% show_best("recall")
modelos <- bind_rows(
rf_tune %>% collect_metrics(summarise = TRUE) %>% mutate(model = 'random_forest'),
arvore_tune %>% collect_metrics(summarise = TRUE) %>% mutate(model = 'decision_tree')
) %>%
select(model, .metric, mean, std_err)
modelos %>% group_by(model) %>%
filter(.metric == "recall") %>%
arrange(desc(mean)) %>%
filter(row_number()==1) %>%
ggplot(aes(model, mean, fill = model))+
geom_col()+
coord_flip()+
theme_minimal()+
geom_text(aes(label = round(mean,3)))+
ylab(NULL)+
xlab(NULL)+
ggtitle("Recall")
modelos %>% group_by(model) %>%
filter(.metric == "accuracy") %>%
arrange(desc(mean)) %>%
filter(row_number()==1) %>%
ggplot(aes(model, mean, fill = model))+
geom_col()+
coord_flip()+
theme_minimal()+
geom_text(aes(label = round(mean,3)))+
ylab(NULL)+
xlab(NULL)+
ggtitle("Accuracy")
best_param <- select_best(rf_tune, metric = 'recall')
rf_last_fit <- finalize_model(rforest, best_param)
final_wf <- workflow() %>%
add_recipe(dados_recipe) %>%
add_model(rf_last_fit)
final_res <- final_wf %>% last_fit(divisao, metrics = metric_set(recall, precision, roc_auc, sens, spec))
final_res %>% collect_metrics()
final_res %>% unnest(.predictions)
matriz_confusao <- final_res %>% unnest(.predictions) %>% conf_mat(estimate = .pred_class, truth = Attrition_Flag)
autoplot(matriz_confusao, type = "heatmap")
summary(matriz_confusao)
